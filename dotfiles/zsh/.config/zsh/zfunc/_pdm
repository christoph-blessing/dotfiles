#compdef pdm

# ZSH completion script for pdm
# Generated by pycomplete 0.3.2

_pdm_de90a161d41a957c_complete()
{
    local state com cur opts

    cur=${words[${#words[@]}]}

    # lookup for command
    for word in ${words[@]:1}; do
        if [[ $word != -* ]]; then
            com=$word
            break
        fi
    done

    if [[ ${cur} == --* ]]; then
        state="option"
        opts=("--help:show this help message and exit" "--pep582:Print the command line to be eval\'d by the shell" "--verbose:-v for detailed output and -vv for more detailed" "--version:show the version and exit")
    elif [[ $cur == $com ]]; then
        state="command"
        coms=("add:Add package\(s\) to pyproject.toml and install them" "build:Build artifacts for distribution" "cache:Control the caches of PDM" "completion:Generate completion scripts for the given shell" "config:Display the current configuration" "export:Export the locked packages set to other formats" "import:Import project metadata from other formats" "info:Show the project information" "init:Initialize a pyproject.toml for PDM" "install:Install dependencies from lock file" "list:List packages installed in the current working set" "lock:Resolve and lock dependencies" "remove:Remove packages from pyproject.toml" "run:Run commands or scripts with local packages loaded" "search:Search for PyPI packages" "show:Show the package information" "sync:Synchronize the current working set with lock file" "update:Update package\(s\) in pyproject.toml" "use:Use the given python version or path as base interpreter")
    fi

    case $state in
        (command)
            _describe 'command' coms
        ;;
        (option)
            case "$com" in

            (add)
            opts=("--dev:Add packages into dev dependencies" "--editable:Specify editable packages" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-sync:Only write pyproject.toml and do not sync the working set" "--save-compatible:Save compatible version specifiers" "--save-exact:Save exact version specifiers" "--save-wildcard:Save wildcard version specifiers" "--section:Specify target section to add into" "--update-eager:Try to update the packages and their dependencies recursively" "--update-reuse:Reuse pinned versions already present in lock file if possible" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (build)
            opts=("--dest:Target directory to put artifacts" "--help:show this help message and exit" "--no-clean:Do not clean the target directory" "--no-sdist:Don\'t build source tarballs" "--no-wheel:Don\'t build wheels" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (cache)
            opts=("--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (completion)
            opts=("--help:show this help message and exit")
            ;;

            (config)
            opts=("--delete:Unset a configuration key" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--local:Set config in the project\'s local configuration filie" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (export)
            opts=("--dev:Include dev dependencies" "--format:Specify the export file format" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-default:Don\'t include dependencies from default seciton" "--output:Write output to the given file, or print to stdout if not given" "--pyproject:Read the list of packages from pyproject.toml" "--section:Specify section\(s\) to include" "--verbose:-v for detailed output and -vv for more detailed" "--without-hashes:Don\'t include artifact hashes")
            ;;

            (import)
            opts=("--format:Specify the file format explicitly" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (info)
            opts=("--env:Show PEP 508 environment markers" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--python:Show the interpreter path" "--where:Show the project root path")
            ;;

            (init)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (install)
            opts=("--dev:Include dev dependencies" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-default:Don\'t include dependencies from default seciton" "--no-lock:Don\'t do lock if lockfile is not found or outdated." "--section:Specify section\(s\) to include" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (list)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--graph:Display a graph of dependencies" "--help:show this help message and exit" "--reverse:Reverse the dependency graph" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (lock)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (remove)
            opts=("--dev:Remove packages from dev dependencies" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-sync:Only write pyproject.toml and do not uninstall packages" "--section:Specify the section the package belongs to" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (run)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--list:Show all available scripts defined in pyproject.toml" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (search)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (show)
            opts=("--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (sync)
            opts=("--clean:clean unused packages" "--dev:Include dev dependencies" "--dry-run:Only prints actions without actually running them" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-clean:don\'t clean unused packages" "--no-default:Don\'t include dependencies from default seciton" "--section:Specify section\(s\) to include" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (update)
            opts=("--dev:Include dev dependencies" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--no-default:Don\'t include dependencies from default seciton" "--save-compatible:Save compatible version specifiers" "--save-exact:Save exact version specifiers" "--save-wildcard:Save wildcard version specifiers" "--section:Specify section\(s\) to include" "--unconstrained:Ignore the version constraint of packages" "--update-eager:Try to update the packages and their dependencies recursively" "--update-reuse:Reuse pinned versions already present in lock file if possible" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            (use)
            opts=("--first:Select the first matched interpreter" "--global:Use the global project, accepts an optional path to the project directory" "--help:show this help message and exit" "--verbose:-v for detailed output and -vv for more detailed")
            ;;

            esac

            _describe 'option' opts
        ;;
        *)
            # fallback to file completion
            _arguments '*:file:_files'
    esac
}

_pdm_de90a161d41a957c_complete "$@"


